// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file organization/v1/organization.proto (package organization.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Pagination } from "../../tools/v1/pagination_pb.js";

/**
 * @generated from message organization.v1.RequestOrganization
 */
export class RequestOrganization extends Message<RequestOrganization> {
  /**
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string uuid = 2;
   */
  uuid = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string domain = 4;
   */
  domain = "";

  /**
   * @generated from field: string logo = 5;
   */
  logo = "";

  /**
   * @generated from field: string description = 6;
   */
  description = "";

  constructor(data?: PartialMessage<RequestOrganization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "organization.v1.RequestOrganization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "logo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RequestOrganization {
    return new RequestOrganization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RequestOrganization {
    return new RequestOrganization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RequestOrganization {
    return new RequestOrganization().fromJsonString(jsonString, options);
  }

  static equals(a: RequestOrganization | PlainMessage<RequestOrganization> | undefined, b: RequestOrganization | PlainMessage<RequestOrganization> | undefined): boolean {
    return proto3.util.equals(RequestOrganization, a, b);
  }
}

/**
 * @generated from message organization.v1.ResponseOrganization
 */
export class ResponseOrganization extends Message<ResponseOrganization> {
  /**
   * @generated from field: string uuid = 1;
   */
  uuid = "";

  /**
   * @generated from field: string created_at = 2;
   */
  createdAt = "";

  /**
   * @generated from field: string updated_at = 3;
   */
  updatedAt = "";

  /**
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * @generated from field: string domain = 5;
   */
  domain = "";

  /**
   * @generated from field: string logo = 6;
   */
  logo = "";

  /**
   * @generated from field: string description = 7;
   */
  description = "";

  constructor(data?: PartialMessage<ResponseOrganization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "organization.v1.ResponseOrganization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "created_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "updated_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "logo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResponseOrganization {
    return new ResponseOrganization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResponseOrganization {
    return new ResponseOrganization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResponseOrganization {
    return new ResponseOrganization().fromJsonString(jsonString, options);
  }

  static equals(a: ResponseOrganization | PlainMessage<ResponseOrganization> | undefined, b: ResponseOrganization | PlainMessage<ResponseOrganization> | undefined): boolean {
    return proto3.util.equals(ResponseOrganization, a, b);
  }
}

/**
 * @generated from message organization.v1.ParamsOrganization
 */
export class ParamsOrganization extends Message<ParamsOrganization> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: string uuid = 2;
   */
  uuid = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string domain = 4;
   */
  domain = "";

  /**
   * @generated from field: int32 page = 5;
   */
  page = 0;

  /**
   * @generated from field: int32 per_page = 6;
   */
  perPage = 0;

  constructor(data?: PartialMessage<ParamsOrganization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "organization.v1.ParamsOrganization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "per_page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParamsOrganization {
    return new ParamsOrganization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParamsOrganization {
    return new ParamsOrganization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParamsOrganization {
    return new ParamsOrganization().fromJsonString(jsonString, options);
  }

  static equals(a: ParamsOrganization | PlainMessage<ParamsOrganization> | undefined, b: ParamsOrganization | PlainMessage<ParamsOrganization> | undefined): boolean {
    return proto3.util.equals(ParamsOrganization, a, b);
  }
}

/**
 * @generated from message organization.v1.ResponseOrganizationList
 */
export class ResponseOrganizationList extends Message<ResponseOrganizationList> {
  /**
   * @generated from field: repeated organization.v1.ResponseOrganization organizations = 1;
   */
  organizations: ResponseOrganization[] = [];

  /**
   * @generated from field: tools.v1.Pagination pagination = 2;
   */
  pagination?: Pagination;

  constructor(data?: PartialMessage<ResponseOrganizationList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "organization.v1.ResponseOrganizationList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organizations", kind: "message", T: ResponseOrganization, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: Pagination },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResponseOrganizationList {
    return new ResponseOrganizationList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResponseOrganizationList {
    return new ResponseOrganizationList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResponseOrganizationList {
    return new ResponseOrganizationList().fromJsonString(jsonString, options);
  }

  static equals(a: ResponseOrganizationList | PlainMessage<ResponseOrganizationList> | undefined, b: ResponseOrganizationList | PlainMessage<ResponseOrganizationList> | undefined): boolean {
    return proto3.util.equals(ResponseOrganizationList, a, b);
  }
}

